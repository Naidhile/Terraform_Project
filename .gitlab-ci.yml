stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  TF_ENV: "dev"
  TF_WORKING_DIR: "environment/$TF_ENV"
  TF_VERSION: "1.5.0"

image: nginx:latest  # Using the nginx image

services:
  - docker:dind

clone_repository:
  stage: clone
  script:
    - echo "Installing git in nginx container..."
    - apt-get update && apt-get install -y git  # Install git
    - echo "Cloning GitHub repository for Terraform configuration files..."
    - git clone https://github.com/Naidhile/Terraform_Project

install_dependencies:
  stage: setup
  script:
    - apt-get update && apt-get install -y wget unzip curl
    - wget https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_$TF_VERSION_linux_amd64.zip
    - unzip terraform_$TF_VERSION_linux_amd64.zip
    - mv terraform /usr/local/bin/
    - terraform --version  # Verify installation
    - docker --version  # Verify Docker installation
initialize_terraform:
  stage: initialize
  script:
    - echo "Initializing Terraform..."
    - terraform init $TF_WORKING_DIR  # Run terraform init in the current environment

plan_infrastructure:
  stage: plan
  script:
    - echo "Creating Terraform execution plan..."
    - terraform plan -out=tfplan $TF_WORKING_DIR  # Generate a plan for Terraform

apply_configuration:
  stage: apply
  script:
    - echo "Applying Terraform configuration..."
    - terraform apply -auto-approve $TF_WORKING_DIR/tfplan  # Apply the plan

test_configuration:
  stage: test
  script:
    - echo "Testing deployed infrastructure..."
    - terraform output  # Show the output from Terraform
    - curl http://localhost:8080  # Check if Nginx is running and serving content on port 8080

cleanup:
  stage: cleanup
  script:
    - echo "Cleaning up the environment..."
    - docker ps -a  # Show all containers, check if any container is hanging
    - docker rm -f $(docker ps -aq)  # Clean up all containers to avoid any leftovers
