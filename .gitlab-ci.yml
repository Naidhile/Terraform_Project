stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  GITHUB_REPO: "Naidhile/Terraform_Project"  # Your GitHub repository for Terraform configuration
  DOCKER_USER: "Naidhile"  # Docker username for pushing images if needed

clone_repository:
  stage: clone
  script:
    - echo "Cloning GitHub repository for Terraform configuration files..."
    - git clone https://github.com/$GITHUB_REPO.git

install_dependencies:
  stage: setup
  script:
    - echo "Setting up environment for Terraform..."
    - docker pull hashicorp/terraform:latest  # Pull the latest Terraform Docker image
    - docker run -d --name terraform-env -v $CI_PROJECT_DIR:/workspace hashicorp/terraform:latest  # Mount the repo directory to the container

initialize_terraform:
  stage: initialize
  script:
    - echo "Initializing Terraform..."
    - docker exec -i terraform-env terraform init /workspace  # Run terraform init in the workspace

plan_infrastructure:
  stage: plan
  script:
    - echo "Creating Terraform execution plan..."
    - docker exec -i terraform-env terraform plan -out=/workspace/tfplan /workspace  # Generate a plan in the workspace

apply_configuration:
  stage: apply
  script:
    - echo "Applying Terraform configuration..."
    - docker exec -i terraform-env terraform apply -auto-approve /workspace/tfplan  # Apply the plan in the workspace

test_configuration:
  stage: test
  script:
    - echo "Testing deployed infrastructure..."
    - docker exec -i terraform-env terraform output  # Show the output from Terraform

cleanup:
  stage: cleanup
  script:
    - echo "Cleaning up the environment..."
    - docker rm -f terraform-env  # Remove the container after use
