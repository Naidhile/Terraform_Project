stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  TF_ENV: "dev"  # Specify the environment (dev, staging, production)
  TF_WORKING_DIR: "environment/$TF_ENV"  # Working directory path
  TF_VERSION: "1.5.0"  # Define the version of Terraform to use

# Use the nginx image if required for your pipeline's purpose
image: nginx:latest  # Using the nginx:latest image

services:
  - docker:dind  # Docker-in-Docker service to enable Docker commands

# Clone the repository with Terraform files
clone_repository:
  stage: clone
  script:
    - echo "Cloning GitHub repository for Terraform configuration files..."
    - git clone https://github.com/Naidhile/Terraform_Project

# Set up the environment and verify Nginx setup
install_dependencies:
  stage: setup
  script:
    - echo "Setting up environment for Terraform and Nginx..."
    - docker info  # Ensure Docker-in-Docker is functioning
    - docker run -d --name nginx-container -p 8080:80 nginx:latest  # Run Nginx service in the background
    - docker ps  # Check if Nginx container is running

# Initialize Terraform configuration
initialize_terraform:
  stage: initialize
  script:
    - echo "Initializing Terraform..."
    - terraform init $TF_WORKING_DIR  # Initialize Terraform in the working directory

# Create Terraform execution plan
plan_infrastructure:
  stage: plan
  script:
    - echo "Creating Terraform execution plan..."
    - terraform plan -out=tfplan $TF_WORKING_DIR  # Generate a plan for Terraform

# Apply the Terraform configuration
apply_configuration:
  stage: apply
  script:
    - echo "Applying Terraform configuration..."
    - terraform apply -auto-approve $TF_WORKING_DIR/tfplan  # Apply the plan

# Test the deployed infrastructure (you can test Nginx here too)
test_configuration:
  stage: test
  script:
    - echo "Testing deployed infrastructure..."
    - terraform output  # Show the output from Terraform
    - curl http://localhost:8080  # Check if Nginx is running and serving content on port 8080

# Cleanup the environment (clean up Nginx container as well)
cleanup:
  stage: cleanup
  script:
    - echo "Cleaning up the environment..."
    - docker ps -a  # Show all containers, check if any container is hanging
    - docker rm -f $(docker ps -aq)  # Clean up all containers to avoid any leftovers
