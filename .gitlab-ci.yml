stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  TF_VERSION: "1.10.5"  # Update to the latest version of Terraform
  TF_PROJECT_DIR: "/builds/naidhilebhuvana/Terraform_Project"  # GitLab Runner's path

image: alpine:latest  # Using Alpine base image

services:
  - name: docker:20.10.7-dind  # Docker-in-Docker service
    alias: docker
    command: ["--host=tcp://0.0.0.0:2375"]

before_script:
  - echo "Installing required tools..."
  - apk add --no-cache curl unzip git docker  # Ensure required tools are installed
  - echo "Installing Terraform..."
  - curl -LO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
  - unzip -o terraform_${TF_VERSION}_linux_amd64.zip  # Force overwrite files during unzip
  - mv terraform /usr/local/bin/  # Move Terraform binary to PATH
  - terraform --version  # Verify Terraform installation
  - export DOCKER_HOST=tcp://docker:2375  # Ensure Docker is accessible
  - echo "Waiting for Docker daemon to initialize..."
  - sleep 25  # Optional: Wait for Docker to fully initialize
  - docker ps || (echo "Docker is not running correctly" && exit 1)

clone:
  stage: clone
  script:
    - echo "Cloning the repository..."
    - echo "Current directory: $(pwd)"  # Print current working directory
    - rm -rf $TF_PROJECT_DIR  # Remove any existing contents in the directory
    - git clone https://github.com/Naidhile/Terraform_Project.git $TF_PROJECT_DIR
    - cd $TF_PROJECT_DIR
    - echo "Repository cloned."
    - echo "Successfully cloned repository."

setup:
  stage: setup
  script:
    - echo "Setting up Terraform directory..."
    - cd $TF_PROJECT_DIR  # Change to the cloned directory
    - echo "Setup complete."

initialize:
  stage: initialize
  script:
    - echo "Initializing Terraform..."
    - terraform init
    - echo "Terraform initialization complete."

plan:
  stage: plan
  script:
    - terraform init
    - echo "Running Terraform plan..."
    - terraform plan -out=plan.tfout -var="container_name=my_container" -var="image=nginx:latest" -var="external_port=8082" -input=false
    - ls -l plan.tfout  # Check if the plan file was created successfully

apply:
  stage: apply
  script:
    - echo "Applying Terraform plan..."
    - ls -l plan.tfout  # Ensure the plan file exists
    - terraform apply -auto-approve plan.tfout
    - echo "Terraform apply complete."

test:
  stage: test
  script:
    - echo "Running tests..."
    - terraform show
    - echo "Tests complete."

cleanup:
  stage: cleanup
  script:
    - echo "Cleaning up Terraform state..."
    - terraform destroy -auto-approve
    - echo "Cleanup complete."
