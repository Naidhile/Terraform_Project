stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  TF_VERSION: "1.10.5"
  TF_PROJECT_DIR: "/builds/naidhilebhuvana/Terraform_Project"

image: alpine:latest

services:
  - name: docker:20.10.7-dind
    alias: docker
    command: ["--host=tcp://0.0.0.0:2375"]

cache:
  key: terraform
  paths:
    - .terraform/
    - terraform.lock.hcl
    - /usr/local/bin/terraform

before_script:
  - echo "Installing required tools..."
  - apk add --no-cache curl unzip git docker
  - echo "Installing Terraform..."
  - curl -LO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
  - unzip -o terraform_${TF_VERSION}_linux_amd64.zip
  - mv terraform /usr/local/bin/
  - terraform --version
  - export DOCKER_HOST=tcp://docker:2375
  - echo "Waiting for Docker daemon to initialize..."
  - until docker info > /dev/null 2>&1; do echo "Waiting for Docker to be ready..."; sleep 5; done

clone:
  stage: clone
  script:
    - |
      echo "Cloning the repository..."
      rm -rf /builds/naidhilebhuvana/Terraform_Project
      mkdir -p /builds/naidhilebhuvana/Terraform_Project
      cd /builds/naidhilebhuvana/Terraform_Project
      git clone https://github.com/Naidhile/Terraform_Project.git .
      if [ $? -eq 0 ]; then echo "Repository cloned successfully."; else echo "Failed to clone repository."; exit 1; fi

setup:
  stage: setup
  script:
    - echo "Setting up Terraform directory..."
    - cd $TF_PROJECT_DIR
    - echo "Setup complete."

initialize:
  stage: initialize
  script:
    - |
      echo "Initializing Terraform..."
      cd $TF_PROJECT_DIR
      rm -rf .terraform  # Clear cached providers
      terraform init -reconfigure
      if [ $? -eq 0 ]; then echo "Terraform initialization complete."; else echo "Terraform initialization failed."; exit 1; fi

plan:
  stage: plan
  script:
    - |
      echo "Running Terraform plan..."
      cd $TF_PROJECT_DIR
      terraform plan -out=plan.tfout -var="container_name=my_container" -var="image=nginx:latest" -var="external_port=8082" -input=false
      if [ $? -eq 0 ]; then echo "Terraform plan complete."; else echo "Terraform plan failed."; exit 1; fi
    - ls -l plan.tfout

apply:
  stage: apply
  script:
    - |
      echo "Applying Terraform plan..."
      cd $TF_PROJECT_DIR
      terraform apply -auto-approve plan.tfout
      if [ $? -eq 0 ]; then echo "Terraform apply complete."; else echo "Terraform apply failed."; exit 1; fi

test:
  stage: test
  script:
    - |
      echo "Validating Terraform configuration..."
      cd $TF_PROJECT_DIR
      terraform validate
      if [ $? -eq 0 ]; then echo "Terraform validation complete."; else echo "Terraform validation failed."; exit 1; fi

cleanup:
  stage: cleanup
  script:
    - |
      echo "Cleaning up Terraform state..."
      cd $TF_PROJECT_DIR
      terraform destroy -auto-approve
      if [ $? -eq 0 ]; then echo "Terraform cleanup complete."; else echo "Terraform cleanup failed."; exit 1; fi
