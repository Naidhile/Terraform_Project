stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  GITHUB_REPO: "Naidhile/Terraform_Project"  # Your GitHub repository for Terraform configuration
  DOCKER_USER: "Naidhile"  # Docker username for pushing images if needed

image: ruby:3.1  # Using ruby:3.1 image

services:
  - docker:dind  # Enable Docker-in-Docker service

clone_repository:
  stage: clone
  script:
    - echo "Cloning GitHub repository for Terraform configuration files..."
    - git clone https://github.com/$GITHUB_REPO.git

install_dependencies:
  stage: setup
  script:
    - echo "Setting up environment for Terraform..."
    - docker pull hashicorp/terraform:latest  # Now Docker can be used to pull the image

initialize_terraform:
  stage: initialize
  script:
    - echo "Initializing Terraform..."
    - docker run -i hashicorp/terraform:latest terraform init

plan_infrastructure:
  stage: plan
  script:
    - echo "Creating Terraform execution plan..."
    - docker run -i hashicorp/terraform:latest terraform plan -out=tfplan

apply_configuration:
  stage: apply
  script:
    - echo "Applying Terraform configuration..."
    - docker run -i hashicorp/terraform:latest terraform apply -auto-approve tfplan

test_configuration:
  stage: test
  script:
    - echo "Testing deployed infrastructure..."
    - docker run -i hashicorp/terraform:latest terraform output

cleanup:
  stage: cleanup
  script:
    - echo "Cleaning up the environment..."
    - docker system prune -f  # Clean up unused Docker images
