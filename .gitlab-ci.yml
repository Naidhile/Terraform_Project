stages:
  - clone
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  TF_WORKING_DIR: "/workspace" # Working directory for Terraform
  GITHUB_REPO_URL: "https://github.com/Naidhile/Terraform_Project"

# Clone the repository
clone_repository:
  stage: clone
  image: alpine/git  # Lightweight image for Git operations
  script:
    - echo "Cloning GitHub repository for Terraform configuration files..."
    - git clone $GITHUB_REPO_URL $TF_WORKING_DIR
    - echo "Repository cloned successfully."
    - ls -al $TF_WORKING_DIR  # Verify contents

# Initialize Terraform
initialize_terraform:
  stage: initialize
  image: kreuzwerker/docker:2.0.0  # Terraform image
  script:
    - echo "Initializing Terraform configuration..."
    - cd $TF_WORKING_DIR
    - terraform init
    - echo "Terraform initialization completed."

# Plan Terraform infrastructure changes
plan_infrastructure:
  stage: plan
  image: kreuzwerker/docker:2.0.0
  script:
    - echo "Creating Terraform execution plan..."
    - cd $TF_WORKING_DIR
    - terraform plan -out=tfplan
    - echo "Terraform plan created successfully."
  artifacts:
    paths:
      - $TF_WORKING_DIR/tfplan  # Save the tfplan file as an artifact

# Apply Terraform configuration
apply_configuration:
  stage: apply
  image: kreuzwerker/docker:2.0.0
  script:
    - echo "Applying Terraform configuration..."
    - cd $TF_WORKING_DIR
    - terraform apply -auto-approve tfplan
    - echo "Terraform configuration applied successfully."

# Test the deployed infrastructure
test_configuration:
  stage: test
  image: kreuzwerker/docker:2.0.0
  script:
    - echo "Testing deployed infrastructure..."
    - cd $TF_WORKING_DIR
    - terraform output
    - echo "Terraform output fetched successfully."

# Cleanup stage
cleanup:
  stage: cleanup
  image: alpine
  script:
    - echo "Cleaning up the environment..."
    - rm -rf $TF_WORKING_DIR
    - echo "Cleanup completed."
