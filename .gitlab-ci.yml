stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  TF_ENV: "dev"  # Specify the environment (dev, staging, production)
  TF_WORKING_DIR: "environment/$TF_ENV"  # Working directory path
  TF_VERSION: "1.5.0"  # Define the version of Terraform to use

image: kreuzwerker/terraform:latest  # Use the Terraform image

services:
  - docker:dind  # Docker-in-Docker service to enable Docker commands

clone_repository:
  stage: clone
  script:
    - echo "Cloning GitHub repository for Terraform configuration files..."
    - git clone https://github.com/Naidhile/Terraform_Project

install_dependencies:
  stage: setup
  script:
    - echo "Setting up environment for Terraform..."
    - docker run -d --name terraform-env kreuzwerker/terraform:latest
    - docker ps  # Ensure the container is running

initialize_terraform:
  stage: initialize
  script:
    - echo "Initializing Terraform..."
    - docker exec -i terraform-env terraform init

plan_infrastructure:
  stage: plan
  script:
    - echo "Creating Terraform execution plan..."
    - docker exec -i terraform-env terraform plan -out=tfplan

apply_configuration:
  stage: apply
  script:
    - echo "Applying Terraform configuration..."
    - docker exec -i terraform-env terraform apply -auto-approve tfplan

test_configuration:
  stage: test
  script:
    - echo "Testing deployed infrastructure..."
    - docker exec -i terraform-env terraform output

cleanup:
  stage: cleanup
  script:
    - echo "Cleaning up the environment..."
    - docker rm -f terraform-env
