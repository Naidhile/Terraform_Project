stages:
  - clone
  - setup
  - initialize
  - plan
  - apply
  - test
  - cleanup

variables:
  GITHUB_REPO: "githubuser/config-management-repo"
  TF_WORKING_DIR: "/workspace" # Working directory inside the container

clone_repository:
  stage: clone
  script:
    - echo "Cloning GitHub repository for Terraform configuration files..."
    - git clone https://github.com/Naidhile/Terraform_Project
    - echo "Repository cloned successfully."
    - ls -al  # Verify contents

install_dependencies:
  stage: setup
  script:
    - echo "Pulling kreuzwerker/docker image for Terraform..."
    - docker pull kreuzwerker/docker:2.0.0

initialize_terraform:
  stage: initialize
  script:
    - echo "Initializing Terraform configuration..."
    - docker run --rm \
        -v $(pwd):$TF_WORKING_DIR \
        -w $TF_WORKING_DIR \
        kreuzwerker/docker:2.0.0 init
    - echo "Terraform initialization completed."

plan_infrastructure:
  stage: plan
  script:
    - echo "Creating Terraform execution plan..."
    - docker run --rm \
        -v $(pwd):$TF_WORKING_DIR \
        -w $TF_WORKING_DIR \
        kreuzwerker/docker:2.0.0 plan -out=tfplan
    - echo "Terraform plan created successfully."

apply_configuration:
  stage: apply
  script:
    - echo "Applying Terraform configuration..."
    - docker run --rm \
        -v $(pwd):$TF_WORKING_DIR \
        -w $TF_WORKING_DIR \
        kreuzwerker/docker:2.0.0 apply -auto-approve tfplan
    - echo "Terraform configuration applied successfully."

test_configuration:
  stage: test
  script:
    - echo "Testing deployed infrastructure..."
    - docker run --rm \
        -v $(pwd):$TF_WORKING_DIR \
        -w $TF_WORKING_DIR \
        kreuzwerker/docker:2.0.0 output
    - echo "Terraform output fetched successfully."

cleanup:
  stage: cleanup
  script:
    - echo "Cleaning up the environment..."
    - docker ps -a -q --filter "name=terraform-env" | xargs --no-run-if-empty docker rm -f
    - echo "Cleanup completed."
