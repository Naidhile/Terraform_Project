stages:
  - build
  - test
  - security
  - terraform_plan
  - approval
  - terraform_apply
  - cleanup

# Global variables
variables:
  TF_VAR_environment: "dev"            # Specify the environment (e.g., dev, prod)
  TF_LOG: "DEBUG"                      # Enable Terraform debug logs
  TF_INPUT: "false"                    # Disable interactive prompts
  TF_PLAN_FILE: "terraform-plan.tfplan" # Terraform plan file

# Stage 1: Build Docker image containing Terraform
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Building Docker image for the Terraform project..."
    - docker version
    - docker build -t terraform-project .

# Stage 2: Validate Terraform code
test:
  stage: test
  image: hashicorp/terraform:latest
  script:
    - echo "Initializing and validating Terraform code..."
    - terraform version
    - terraform init
    - terraform validate
    - terraform fmt -check

# Stage 3: Security checks on Terraform code
security:
  stage: security
  image: python:3.8
  script:
    - echo "Running security checks on Terraform code..."
    - pip install tflint checkov tfsec
    - tflint .             # Linting Terraform code
    - checkov -d .         # Security scan using Checkov
    - tfsec .              # Additional security checks using TFSec

# Stage 4: Generate Terraform plan
terraform_plan:
  stage: terraform_plan
  image: hashicorp/terraform:latest
  script:
    - echo "Generating Terraform plan..."
    - terraform version
    - terraform init
    - terraform plan -out=${TF_PLAN_FILE} -detailed-exitcode
  artifacts:
    paths:
      - ${TF_PLAN_FILE}    # Save the Terraform plan as an artifact
    expire_in: 1 day       # Artifact expiration time

# Stage 5: Manual approval
approval:
  stage: approval
  script:
    - echo "Waiting for manual approval..."
  when: manual
  allow_failure: false

# Stage 6: Apply Terraform changes
terraform_apply:
  stage: terraform_apply
  image: hashicorp/terraform:latest
  script:
    - echo "Applying Terraform changes..."
    - terraform version
    - terraform init
    - terraform apply -auto-approve ${TF_PLAN_FILE}
  dependencies:
    - terraform_plan

# Stage 7: Clean up Docker resources
cleanup:
  stage: cleanup
  image: docker:latest
  script:
    - echo "Cleaning up unused Docker resources..."
    - docker system prune -f
